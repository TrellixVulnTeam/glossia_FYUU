from distutils.core import setup
import os
import errno

# Certain information, available now, needs to be accessible from the running
# scripts after installation. We achieve this by means of a stub module
# generated here (suggestions welcome, but not so much as good patches). Shared
# data folder is one option, but distutils not so nice with
# finding/configuring that - in fact, SYSCONFDIR is one of our passed
# parameters, so finding dirs (such as shared data) is seemingly non-trivial.

# Create the module directory
config_directory = "${CMAKE_CURRENT_BINARY_DIR}/gosmart_sf_config"
try:
    os.makedirs(config_directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise RuntimeError("Could not create directory: %s" % (str(e)))

# The init script will contain the necessary variables
config_target = os.path.join(config_directory, "__init__.py")

with open(config_target, "w") as f:
    f.write("""
git_revision = '{0}'
etc_location = '{1}'
""".format(
        "${GIT_REVISION}",
        "${ETC_FULL_LOCATION}"
    ))

# Standard configuration, including GSSF (launcher) and GSSA (server) modules,
# along with a whole lot of important package data. Standard fields should be
# loaded from configuration files ultimately
setup(name='Go-Smart Simulation',
      version='${PACKAGE_VERSION}',
      packages=['gssa.comparator', 'gssa', 'gssa.families', 'gosmart_sf_config'],
      package_dir={'gssa': '${CMAKE_CURRENT_SOURCE_DIR}/src/gssa', 'gosmart_sf_config': config_directory},

      description='Wrapper for Go-Smart Simulation Architecture',
      author='NUMA Engineering Services Ltd.',
      author_email='phil.weir@numa.ie',
      url='http://gosmart-project.eu/',

      scripts=[
          '${CMAKE_CURRENT_SOURCE_DIR}' + '/scripts/go-smart-simulation-server',
          '${CMAKE_CURRENT_SOURCE_DIR}' + '/scripts/go-smart-simulation-client',
          '${CMAKE_CURRENT_SOURCE_DIR}' + '/scripts/go-smart-comparator',
      ])
