#!/usr/bin/env python3

# This file is part of the Go-Smart Simulation Architecture (GSSA).
# Go-Smart is an EU-FP7 project, funded by the European Commission.
#
# Copyright (C) 2013-  NUMA Engineering Ltd. (see AUTHORS file)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from autobahn.asyncio.wamp import ApplicationRunner

from gosmart.server.server import GoSmartSimulationComponent
from gosmart.server.database import SQLiteSimulationDatabase

import argparse
import uuid


def launch(x, server_id):
    component = GoSmartSimulationComponent(x, server_id, lambda: SQLiteSimulationDatabase("simulations.sqlite3"))

    return component

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", help="host to connect to", default="localhost")
    parser.add_argument("--websocket-port", help="port hosting websocket", default="9000", type=int)
    parser.add_argument("--sftp-host", help="server hosting SFTP", default="localhost")
    parser.add_argument("--sftp-port", help="port hosting SFTP", default="9001", type=int)
    parser.add_argument("--key-file", help="file for authenticating to SFTP", default="id_rsa")
    parser.add_argument("sid", help="Server UUID (should be subdirectory of current directory", default=None, nargs='?')
    args = parser.parse_args()

    key_file = args.key_file
    host = args.host
    websocket_port = args.websocket_port
    sftp_port = args.sftp_port
    sftp_host = args.sftp_host

    if not args.sid:
        server_id = str(uuid.uuid4())
    else:
        server_id = args.sid

    runner = ApplicationRunner(url="ws://%s:%d/ws" % (host, websocket_port), realm="realm1")
    runner.run(lambda x: launch(x, server_id=server_id))
